from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, Chat
from telegram.ext import Application, CommandHandler, MessageHandler, ContextTypes, filters
from supabase import create_client
from datetime import datetime, timedelta
import pytz

# --- Supabase ---
SUPABASE_URL = "https://jghlvdgtowjattktkejw.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImpnaGx2ZGd0b3dqYXR0a3RrZWp3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTkxNTc2NzYsImV4cCI6MjA3NDczMzY3Nn0.IxceNDdpFHPPkOwjlk644C1fji4wAhQr2dR8FmEKVas"
supabase = create_client(SUPABASE_URL, SUPABASE_KEY)

# --- Telegram ---
BOT_TOKEN = "8458767187:AAHV6sl14LzVt1Bnk49LvoR6QYg7MAvbYhA"

# --- –ê–¥–º–∏–Ω—ã –∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ ---
OWNER_IDS = [996317285]
SELLER_IDS = [6924074231]

# --- –ì—Ä—É–ø–ø–∞ ---
GROUP_ID = -1003107339633
GROUP_NAME = None

# --- –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
waiting_for_message = {}           # –î–ª—è /zov
report_sessions = {}               # {user_id: {"messages": [], "active": True}}
waiting_reports_selection = {}     # {user_id: True} –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤ /reports
waiting_for_new_seller_id = {}     # {admin_id: True}
waiting_for_remove_seller = {}     # {admin_id: True}

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def format_datetime_astro(dt_str):
    dt = datetime.fromisoformat(dt_str)
    dt = dt.astimezone(pytz.timezone("Asia/Almaty"))
    return dt.strftime("%d.%m.%Y %H:%M:%S")

def format_user(user):
    return f"{user.id} (@{user.username})" if user.username else f"{user.id} ({user.full_name})"

def astana_now():
    return datetime.now(pytz.timezone("Asia/Almaty"))

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    first_name = user.first_name

    if user_id in OWNER_IDS:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å üëë –£ –≤–∞—Å –∞–¥–º–∏–Ω-–¥–æ—Å—Ç—É–ø. –ö–æ–º–∞–Ω–¥—ã: /help")
    elif user_id in SELLER_IDS:
        await update.message.reply_text(f"{first_name}, –≤—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ üßë‚Äçüíº.\n–î–æ—Å—Ç—É–ø–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /report")
    else:
        await update.message.reply_text(f"{first_name}, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in OWNER_IDS:
        await update.message.reply_text(
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/zov ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É\n"
            "/status ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞\n"
            # "/staff ‚Äî —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
            "/reports ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç—ã\n"
            "/add_seller ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
            "/remove_seller ‚Äî —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞\n"
            "/list_sellers ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤"
        )
    elif user_id in SELLER_IDS:
        await update.message.reply_text("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/report ‚Äî —Å–¥–∞—Ç—å –æ—Ç—á—ë—Ç")
    else:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        return

    global GROUP_NAME
    if GROUP_NAME is None:
        try:
            chat: Chat = await context.bot.get_chat(GROUP_ID)
            GROUP_NAME = chat.title
        except:
            GROUP_NAME = "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    admin_list = [f"- {format_user(await context.bot.get_chat(uid))}" for uid in OWNER_IDS]
    staff_list = [f"- {format_user(await context.bot.get_chat(uid))}" for uid in SELLER_IDS]

    await update.message.reply_text(
        f"ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
        f"üìå –ü–æ–¥–∫–ª—é—á—ë–Ω –∫ –≥—Ä—É–ø–ø–µ: {GROUP_NAME}\n"
        f"üëë –ê–¥–º–∏–Ω—ã:\n" + "\n".join(admin_list) + "\n"
        f"üßë‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n" + ("\n".join(staff_list) if staff_list else "–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    )

async def staff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id not in OWNER_IDS:
        return
    staff_list = [f"- {format_user(await context.bot.get_chat(uid))}" for uid in SELLER_IDS]
    await update.message.reply_text("üßë‚Äçüíº –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:\n" + ("\n".join(staff_list) if staff_list else "‚ùå –°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç."))

# --- ZOV ---
async def zov(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in OWNER_IDS:
        waiting_for_message[user_id] = True
        await update.message.reply_text("‚úçÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –≤ –≥—Ä—É–ø–ø—É.")
    else:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

# --- Report ---
async def report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in SELLER_IDS:
        report_sessions[user_id] = {"messages": [], "active": True}
        await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –æ—Ç—á—ë—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, —Ñ–∞–π–ª).")
    else:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")

# --- Reports ---
async def reports(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in OWNER_IDS:
        return
    keyboard = [["–°–µ–≥–æ–¥–Ω—è", "–í—á–µ—Ä–∞"], ["–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"], ["–ì–æ–¥", "–í—Å—ë"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=reply_markup)
    waiting_reports_selection[user_id] = True

async def handle_reports_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not waiting_reports_selection.get(user_id):
        return

    period = update.message.text.lower()
    now = datetime.now(pytz.timezone("Asia/Almaty"))
    start_date = None

    if period == "—Å–µ–≥–æ–¥–Ω—è":
        start_date = datetime(now.year, now.month, now.day, tzinfo=now.tzinfo)
    elif period == "–≤—á–µ—Ä–∞":
        start_date = datetime(now.year, now.month, now.day, tzinfo=now.tzinfo) - timedelta(days=1)
    elif period == "–Ω–µ–¥–µ–ª—è":
        start_date = now - timedelta(days=7)
    elif period == "–º–µ—Å—è—Ü":
        start_date = now - timedelta(days=30)
    elif period == "–≥–æ–¥":
        start_date = now - timedelta(days=365)
    elif period == "–≤—Å—ë":
        start_date = datetime(1970, 1, 1, tzinfo=now.tzinfo)
    else:
        await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥", reply_markup=ReplyKeyboardRemove())
        waiting_reports_selection[user_id] = False
        return

    res = supabase.table("reports").select("*").gte("date", start_date.isoformat()).execute()
    data = res.data

    if not data:
        await update.message.reply_text("üì≠ –ù–µ—Ç –æ—Ç—á—ë—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥.", reply_markup=ReplyKeyboardRemove())
    else:
        text_lines = []
        for r in data:
            line = f"{format_datetime_astro(r['date'])} - {r['user_id']} (@{r['username']}) - {r['type']}"
            if r["type"] == "text":
                line += f"\n{r['content']}"
            text_lines.append(line)
        await update.message.reply_text("\n\n".join(text_lines), reply_markup=ReplyKeyboardRemove())

    waiting_reports_selection[user_id] = False

# --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ ---
async def add_seller_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in OWNER_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    waiting_for_new_seller_id[user_id] = True
    await update.message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ ID –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞:")

async def remove_seller_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in OWNER_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not SELLER_IDS:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞
    keyboard = [[f"{uid} (@{(await context.bot.get_chat(uid)).username})" if (await context.bot.get_chat(uid)).username else f"{uid}"] for uid in SELLER_IDS]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    waiting_for_remove_seller[user_id] = True
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)

async def list_sellers(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in OWNER_IDS:
        await update.message.reply_text("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    if not SELLER_IDS:
        await update.message.reply_text("‚ùå –ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return
    text_lines = []
    for uid in SELLER_IDS:
        try:
            user = await context.bot.get_chat(uid)
            text_lines.append(f"- {format_user(user)}")
        except:
            text_lines.append(f"- {uid} (–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ)")
    await update.message.reply_text("üßë‚Äçüíº –°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:\n" + "\n".join(text_lines))

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_all_messages(update: Update, context):
    user = update.effective_user
    user_id = user.id
    message = update.message

    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ ---
    if waiting_for_new_seller_id.get(user_id):
        text = message.text
        if not text.isdigit():
            await update.message.reply_text("‚ùå ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return
        new_id = int(text)
        if new_id in SELLER_IDS:
            await update.message.reply_text(f"‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} —É–∂–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.")
        else:
            SELLER_IDS.append(new_id)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_id} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.")
        waiting_for_new_seller_id[user_id] = False
        return

    # --- –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ ---
    if waiting_for_remove_seller.get(user_id):
        uid_str = message.text.split(" ")[0]
        if not uid_str.isdigit():
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫.", reply_markup=ReplyKeyboardRemove())
            return
        uid = int(uid_str)
        if uid in SELLER_IDS:
            SELLER_IDS.remove(uid)
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.", reply_markup=ReplyKeyboardRemove())
        else:
            await update.message.reply_text("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        waiting_for_remove_seller[user_id] = False
        return

    # --- ZOV ---
    if waiting_for_message.get(user_id):
        if message.text:
            await context.bot.send_message(chat_id=GROUP_ID, text=message.text)
        elif message.photo:
            await context.bot.send_photo(chat_id=GROUP_ID, photo=message.photo[-1].file_id, caption=message.caption or "")
        elif message.document:
            await context.bot.send_document(chat_id=GROUP_ID, document=message.document.file_id, caption=message.caption or "")
        waiting_for_message[user_id] = False
        await message.reply_text("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É.")
        return

    # --- –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á—ë—Ç–∞ ---
    if waiting_reports_selection.get(user_id):
        await handle_reports_selection(update, context)
        return

    # --- Report ---
    if report_sessions.get(user_id):
        session = report_sessions[user_id]

        if session["active"] == True:
            session["messages"].append(message)
            keyboard = [["–î–∞", "–ù–µ—Ç"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
            await message.reply_text("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë?", reply_markup=reply_markup)
            session["active"] = "waiting_confirm"
            return

        elif session["active"] == "waiting_confirm":
            if message.text and message.text.lower() == "–¥–∞":
                session["active"] = True
                await message.reply_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏–µ.", reply_markup=ReplyKeyboardRemove())
                return
            elif message.text and message.text.lower() == "–Ω–µ—Ç":
                for msg in session["messages"]:
                    data = {
                        "user_id": user.id,
                        "username": user.username or "",
                        "date": astana_now().isoformat(),
                        "type": "text",
                        "content": msg.text or "",
                        "file_id": None
                    }
                    if msg.photo:
                        data["type"] = "photo"
                        data["file_id"] = msg.photo[-1].file_id
                        data["content"] = msg.caption or ""
                    elif msg.document:
                        data["type"] = "document"
                        data["file_id"] = msg.document.file_id
                        data["content"] = msg.caption or ""
                    elif msg.video:
                        data["type"] = "video"
                        data["file_id"] = msg.video.file_id
                        data["content"] = msg.caption or ""

                    supabase.table("reports").insert(data).execute()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É
                    if data["type"] == "text":
                        await context.bot.send_message(
                            chat_id=OWNER_IDS[0],
                            text=f"üì© –û—Ç—á—ë—Ç –æ—Ç {format_user(user)}:\n\n{data['content']}"
                        )
                    elif data["type"] == "photo":
                        await context.bot.send_photo(
                            chat_id=OWNER_IDS[0],
                            photo=data["file_id"],
                            caption=data["content"] or f"üì© –û—Ç—á—ë—Ç –æ—Ç {format_user(user)}"
                        )
                    elif data["type"] == "document":
                        await context.bot.send_document(
                            chat_id=OWNER_IDS[0],
                            document=data["file_id"],
                            caption=data["content"] or f"üì© –û—Ç—á—ë—Ç –æ—Ç {format_user(user)}"
                        )
                    elif data["type"] == "video":
                        await context.bot.send_video(
                            chat_id=OWNER_IDS[0],
                            video=data["file_id"],
                            caption=data["content"] or f"üì© –û—Ç—á—ë—Ç –æ—Ç {format_user(user)}"
                        )

                await message.reply_text("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.", reply_markup=ReplyKeyboardRemove())
                del report_sessions[user_id]
                return

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
app = Application.builder().token(BOT_TOKEN).build()

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –∫–æ–º–∞–Ω–¥ ---
app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("status", status))
app.add_handler(CommandHandler("staff", staff))
app.add_handler(CommandHandler("zov", zov))
app.add_handler(CommandHandler("report", report))
app.add_handler(CommandHandler("reports", reports))
app.add_handler(CommandHandler("add_seller", add_seller_start))
app.add_handler(CommandHandler("remove_seller", remove_seller_start))
app.add_handler(CommandHandler("list_sellers", list_sellers))

# --- –•—ç–Ω–¥–ª–µ—Ä –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_all_messages))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()